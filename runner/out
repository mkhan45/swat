warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block
  --> src/main.rs:15:27
   |
15 |             let val_ptr = mem_ptr.add(ptr as usize) as *const i32;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> src/main.rs:4:1
   |
4  | unsafe fn val_to_string(mem_ptr: *const u8, json: &JsonValue, tp: &JsonValue, ptr: i32) -> String {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:16:23
   |
16 |             let inj = *val_ptr;
   |                       ^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:17:23
   |
17 |             let tag = *(val_ptr.add(1));
   |                       ^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block
  --> src/main.rs:17:24
   |
17 |             let tag = *(val_ptr.add(1));
   |                        ^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `val_to_string` is unsafe and requires unsafe block
  --> src/main.rs:19:38
   |
19 |             format!("{inj_tag}({})", val_to_string(mem_ptr, json, inj_tp, inj))
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block
  --> src/main.rs:22:27
   |
22 |             let val_ptr = mem_ptr.add(ptr as usize) as *const i32;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:23:23
   |
23 |             let fst = *(val_ptr.add(0));
   |                       ^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block
  --> src/main.rs:23:24
   |
23 |             let fst = *(val_ptr.add(0));
   |                        ^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> src/main.rs:24:23
   |
24 |             let snd = *(val_ptr.add(1));
   |                       ^^^^^^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `std::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block
  --> src/main.rs:24:24
   |
24 |             let snd = *(val_ptr.add(1));
   |                        ^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `val_to_string` is unsafe and requires unsafe block
  --> src/main.rs:27:33
   |
27 |             format!("({}, {})", val_to_string(mem_ptr, json, fst_tp, fst), val_to_string(mem_ptr, json, snd_tp, snd))
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `val_to_string` is unsafe and requires unsafe block
  --> src/main.rs:27:76
   |
27 |             format!("({}, {})", val_to_string(mem_ptr, json, fst_tp, fst), val_to_string(mem_ptr, json, snd_tp, snd))
   |                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning: unused variable: `cur_ptr`
  --> src/main.rs:74:21
   |
74 |                 let cur_ptr = base.add(*cur as usize);
   |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_cur_ptr`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src/main.rs:120:21
    |
120 |                 let mut ptr = mem_ptr as *mut i32;
    |                     ----^^^
    |                     |
    |                     help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

For more information about this error, try `rustc --explain E0133`.
warning: `runner` (bin "runner") generated 14 warnings (run `cargo fix --bin "runner"` to apply 2 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.03s
     Running `target/debug/runner ../testint.wat`

thread 'main' panicked at src/main.rs:92:63:
called `Result::unwrap()` on an `Err` value: WebAssembly translation error

Caused by:
    Invalid input WebAssembly code at offset 217: type mismatch: values remaining on stack at end of block
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
