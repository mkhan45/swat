type nat = +{ 'zero : 1, 'succ : nat }

proc zero (d : nat) =
  cut u : 1
    write u ()
    write d 'zero(u)

proc add (d : nat) (a : nat) (b : nat) =
  read b {
  | 'zero(u) => read u ()
                  id d a
  | 'succ(s) => cut x : nat
                  call add x a s
                  call succ d x
  }

proc one (d : nat) =
  cut z : nat
    call zero z
    call succ d z

proc succ (d : nat) (n : nat) =
  write d 'succ(n)

proc two (d : nat) =
  cut o : nat
    call one o
    call succ d o

proc lambda (d : nat => nat) = write d {
    | (x, d_1) =>
        cut o : nat
            call one o
        call add d_1 x o
}


proc tst1 (d : nat) =
    cut f : nat => nat
        call lambda f
    cut a : nat
        call one a
    read f (a, d)

proc addn (d : nat => nat) (n : int) = write d {
    | (x, d_1) => call add d_1 x n
}

proc tst2 (d : nat) =
    cut t : nat
        call two t
    cut f : nat => nat
        call addn f t
    cut a : nat
        call one a
    read f (a, d)

proc main (d : nat) =
    cut x : nat
        call tst1 x
    cut y : nat
        call tst2 y
    call add d x y
