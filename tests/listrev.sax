type bin = +{'b0 : bin, 'b1 : bin, 'e : 1}
type list = +{'nil : 1, 'cons : bin * list}

proc reverse (d : list) (l : list) (acc : list) =
    read l {
    | 'nil(u) => 
        read u ()
            id d acc
    | 'cons(ls) => 
        read ls (hd, tl)
            cut new : list
                cut new_p : bin * list
                    write new_p (hd, acc)
                write new 'cons(new_p)
            call reverse d tl new
    }

proc empty (d : list) =
    cut u : 1
        write u ()
    write d 'nil(u)

proc prepend (d : list) (ls : list) (n : bin) =
    cut p : bin * list
        write p (n, ls)
    write d 'cons(p)

proc zero (d : bin) =
    cut u : 1
        write u ()
    cut e : bin
        write e 'e(u)
    write d 'b0(e)

proc one (d : bin) =
    cut u : 1
        write u ()
    cut e : bin
        write e 'e(u)
    write d 'b1(e)

proc two (d : bin) =
    cut z : 1
        call zero z
    write d 'b1(z)

proc three (d : bin) =
    cut o : 1
        call one o
    write d 'b1(o)

proc ls (d : list) =
    cut z : bin
        call zero z
    cut o : bin
        call one o
    cut tw : bin
        call two tw
    cut th : bin
        call three th
    cut mt : list
        call empty mt
    cut l1 : list
        call prepend l1 mt z
    cut l2 : list
        call prepend l2 l1 o
    cut l3 : list
        call prepend l3 l2 tw
    call prepend d l3 th
