type nat = +{ 'zero : 1, 'succ : nat }

proc zero (d : nat) =
  cut u : 1
    write u ()
    write d 'zero(u)

proc succ (d : nat) (n : nat) =
  write d 'succ(n)

proc one (d : nat) =
  cut z : nat
    call zero z
    call succ d z

proc add (d : nat) (a : nat) (b : nat) =
  read b {
  | 'zero(u) => read u ()
                  id d a
  | 'succ(s) => cut x : nat
                  call add x a s
                  call succ d x
  }

proc two (d : nat) =
  cut one1 : nat
    call one one1
    cut one2 : nat
      call one one2
      call add d one1 one2

proc three (d : nat) =
  cut t : nat
    call two t
    call succ d t

proc dealloc_nat (d : 1) (n : nat) =
  read n {
  | 'zero(u) => id d u
  | 'succ(s) => call dealloc_nat d s
  }

proc dup_nat (d : nat * nat) (n : nat) =
  read n {
  | 'zero(u) => cut z1 : nat
                  write z1 'zero(u)
                  cut z2 : nat
                    call zero z2
                    write d (z1, z2)
  | 'succ(s) => cut ss : nat * nat
                  call dup_nat ss s
                  read ss (s1, s2)
                    cut d1 : nat
                      call succ d1 s1
                      cut d2 : nat
                        call succ d2 s2
                        write d (d1, d2)
  }

proc mul (d : nat) (a : nat) (b : nat) =
  read b {
  | 'zero(u) => cut w : 1
                  call dealloc_nat w a
                  read w ()
                    write d 'zero(u)
  | 'succ(s) => cut as : nat * nat
                  call dup_nat as a
                  read as (a1, a2)
                    cut e : nat
                      call mul e a1 s
                      call add d a2 e
  }

proc four (d : nat) =
  cut two1 : nat
    call two two1
    cut two2 : nat
      call two two2
      call mul d two1 two2

proc five (d : nat) =
  cut two : nat
    call two two
    cut three : nat
      call three three
      call add d two three

proc six (d : nat) =
  cut two : nat
    call two two
    cut three : nat
      call three three
      call mul d two three

type listnode = +{ 'nil : 1, 'cons : nat * listnode }

proc empty (d : listnode) =
  cut u : 1
    write u ()
    write d 'nil(u)

proc prepend (d : listnode) (n : nat) =
  cut h : listnode
    call empty h
    cut p : nat * listnode
      write p (n, h)
      write d 'cons(p)

proc range (d : listnode) (end : nat) =
  read end {
  | 'zero(u) => read u ()
                  call empty d
  | 'succ(s) => cut dups : nat * nat
                  call dup_nat dups s
                  read dups (s1, s2)
                    cut rest : listnode
                      call range rest s1
                      cut curr : nat
                        call succ curr s2
                        cut pair : nat * listnode
                          write pair (curr, rest)
                          write d 'cons(pair)
  }

proc concat (d : listnode) (a : listnode) (b : listnode) =
  read a {
  | 'nil(u) => read u ()
                 id d b
  | 'cons(p) => read p (head, tail)
                  cut rest : listnode
                    call concat rest tail b
                    cut result : nat * listnode
                      write result (head, rest)
                      write d 'cons(result)
  }

proc l1to5 (d : listnode) =
  cut f : nat
    call five f
    call range d f

proc concat_range (d : listnode) =
  cut l1 : listnode
    call l1to5 l1
    cut l2 : listnode
      call l1to5 l2
      call concat d l1 l2
