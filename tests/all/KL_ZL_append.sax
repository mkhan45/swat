type nat = +{'zero : 1, 'succ : nat}
type list = +{'nil : 1, 'cons : nat * list}
type pair = nat * nat

proc zero (d : nat) =
  cut u : 1
     write u ()
  write d 'zero(u)

proc succ (d : nat) (x : nat) =
  write d 'succ(x)

proc cons (d : list) (x : nat) (xs : list) =
  cut p : nat * list
     write p (x, xs)
  write d 'cons(p)

proc nil (d : list) =
  cut u : 1
     write u ()
  write d 'nil(u)

proc append (d : list) (xs : list) (ys : list) =
  read xs {
  | 'nil(u) => read u ()
               id d ys
  | 'cons(p) => read p (x, xs1)
                cut d1 : list
                   call append d1 xs1 ys
                   call cons d x d1
  }


proc dup_nat (d : pair) (x : nat) =
  read x {
  | 'zero(u) => read u ()
                cut n1 : nat
                cut u1 : 1
                   write u1 ()
                   write n1 'zero(u1)
                cut n2 : nat
                cut u2 : 1
                   write u2 ()
                   write n2 'zero(u2)
                   write d (n1, n2)
  | 'succ(x1) => cut p : pair
                    call dup_nat p x1
                    read p (y1, y2)
                 cut n1 : nat
                    write n1 'succ(y1)
                 cut n2 : nat
                    write n2 'succ(y2)
                    write d (n1, n2)
  }

proc make_012 (d : list) =
  cut z : nat
     call zero z
  cut p1 : pair
     call dup_nat p1 z
     read p1 (z1, z2)
  cut one : nat
     call succ one z1
  cut p2 : pair
     call dup_nat p2 one
     read p2 (one1, one2)
  cut two : nat
     call succ two one1
  cut l : list
     call nil l
  cut l1 : list
     call cons l1 z2 l
  cut l2 : list
     call cons l2 one2 l1
     call cons d two l2

/* Run the test */
proc test_append (d : list) =
  cut xs : list
     call make_012 xs
  cut ys : list
     call make_012 ys
     call append d xs ys
