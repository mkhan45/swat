type nat = +{'zero : 1, 'succ : nat}

proc zero (d : nat) =
    cut u : 1
        write u ()
    write d 'zero(u)

proc one (d : nat) =
    cut z : nat
        call zero z
    write d 'succ(z)

proc two (d : nat) =
    cut z : nat
        call one z
    write d 'succ(z)

proc dealloc_nat (d : 1) (n : nat) =
    read n {
    | 'zero(u) => id d u
    | 'succ(n0) => call dealloc_nat d n0
    }
proc dup_nat (d : nat * nat) (n : nat) =
    read n {
    | 'zero(u) => cut d1 : nat
                    write d1 'zero(u)
                  cut d2 : nat
                    cut w : 1
                        write w ()
                    write d2 'zero(w)
                  write d (d1, d2)
    | 'succ(n0) => cut res : nat * nat
                     call dup_nat res n0
                   read res (n1, n2)
                   cut d1 : nat
                     write d1 'succ(n1)
                   cut d2 : nat
                     write d2 'succ(n2)
                   write d (d1, d2)
    }
proc sub (d : nat) (n : nat) (m : nat) =
    read m {
    | 'zero(u) => read u () id d n
    | 'succ(m0) => read n {
                   | 'zero(u) => cut w : 1
                                   call dealloc_nat w m0
                                 read w ()
                                 write d 'zero(u)
                   | 'succ(n0) => call sub d n0 m0
                   }
    }

type bool = +{'false : 1, 'true : 1}

proc leq (d : bool) (n : nat) (m : nat) =
    cut res : nat
      call sub res n m
    read res {
    | 'zero(u) => write d 'true(u)
    | 'succ(res0) => cut w : 1
                       call dealloc_nat w res0
                     write d 'false(w)
    }

proc zero_leq_one (d : bool) =
    cut z : nat
      call zero z
    cut o : nat
      call one o
    call leq d z o

proc one_leq_zero (d : bool) =
    cut z : nat
      call zero z
    cut o : nat
      call one o
    call leq d o z

proc one_leq_two (d : bool) =
    cut o : nat
        call one o
    cut t : nat
        call two t
    call leq d o t