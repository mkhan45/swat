type nat = +{'zero : 1, 'succ : nat}
type bool = +{'true : 1, 'false : 1}
type list = +{'nil : 1, 'cons : nat * list}
type pair = nat * nat

proc zero (d : nat) =
  cut u : 1
     write u ()
  write d 'zero(u)

proc succ (d : nat) (x : nat) =
  write d 'succ(x)

proc cons (d : list) (x : nat) (xs : list) =
  cut p : nat * list
     write p (x, xs)
  write d 'cons(p)

proc nil (d : list) =
  cut u : 1
     write u ()
  write d 'nil(u)

proc dup_nat (d : pair) (x : nat) =
  read x {
  | 'zero(u) => read u ()
                cut n1 : nat
                cut u1 : 1
                   write u1 ()
                   write n1 'zero(u1)
                cut n2 : nat
                cut u2 : 1
                   write u2 ()
                   write n2 'zero(u2)
                   write d (n1, n2)
  | 'succ(x1) => cut p : pair
                    call dup_nat p x1
                    read p (y1, y2)
                 cut n1 : nat
                    write n1 'succ(y1)
                 cut n2 : nat
                    write n2 'succ(y2)
                    write d (n1, n2)
  }

proc drop_nat (d : 1) (x : nat) =
  read x {
  | 'zero(u) => read u ()
                write d ()
  | 'succ(x1) => call drop_nat d x1
}

proc leq (d : bool) (x : nat) (y : nat) =
  read x {
  | 'zero(u) => read u ()
                cut w : 1
                   call drop_nat w y
                write d 'true(w)
  | 'succ(x1) => read y {
                 | 'zero(u) => read u ()
                               cut w : 1
                                  call drop_nat w x1
                               write d 'false(w)
                 | 'succ(y1) => call leq d x1 y1
                 }
  }

proc merge (d : list) (l1 : list) (l2 : list) =
  read l1 {
  | 'nil(u) => read l2 {
               | 'nil(u2) => read u2 ()
                             write d 'nil(u)
               | 'cons(p) => read p (y, rest)
                             cut l1_empty : list
                                write l1_empty 'nil(u)
                             cut merged : list
                                call merge merged l1_empty rest
                             call cons d y merged
               }
  | 'cons(p1) => read l2 {
               | 'nil(u) => read p1 (y, rest)
                            cut l1_empty : list
                               write l1_empty 'nil(u)
                            cut merged : list
                               call merge merged l1_empty rest
                            call cons d y merged
               | 'cons(p2) => read p1 (x, xs)
                              read p2 (y, ys)
                              // dup for linearity
                              cut x_pair : pair
                                 call dup_nat x_pair x
                              read x_pair (x1, x2)
                              cut y_pair : pair
                                 call dup_nat y_pair y
                              read y_pair (y1, y2)
                              // merge
                              cut cmp : bool
                                call leq cmp x1 y1
                              read cmp {
                              | 'true(u) => read u ()
                                            // get back l2
                                            cut l2_ : list
                                               call cons l2_ y2 ys
                                            cut merged : list
                                               call merge merged xs l2_
                                            call cons d x2 merged
                              | 'false(u) => read u ()
                                             // get back l1
                                             cut l1_ : list
                                                call cons l1_ x2 xs
                                             cut merged : list
                                                call merge merged l1_ ys
                                             call cons d y2 merged
                              }
               }
  }

proc split_long (d : list * list) (l : list) (lhs : list) (rhs : list) =
  read l {
  | 'nil(u) => read u ()
               write d (lhs, rhs)
  | 'cons(p) => read p (x, xs)
                cut add_lhs : list
                   call cons add_lhs x lhs
                call split_long d xs rhs add_lhs
  }

proc split (d : list * list) (l : list) =
  cut nil1 : list
     call nil nil1
  cut nil2 : list
     call nil nil2
  call split_long d l nil1 nil2

proc merge_sort (d : list) (l : list) =
  read l {
  | 'nil(u) => write d 'nil(u)
  | 'cons(p) => read p (x, xs)
                cut x_pair : pair
                   call dup_nat x_pair x
                read x_pair (x1, x2)
                read xs {
                | 'nil(u) => read u ()
                             cut w : 1
                                call drop_nat w x2
                                read w ()
                             cut l1 : list
                                cut u1 : 1
                                   write u1 ()
                                write l1 'nil(u1)
                             call cons d x1 l1
                | 'cons(p2) => read p2 (y, ys)
                               cut y_pair : pair
                                 call dup_nat y_pair y
                               read y_pair (y1, y2)
                               cut w1 : 1
                                  call drop_nat w1 y2
                                  read w1 ()
                               cut w2 : 1
                                 call drop_nat w2 x2
                                 read w2 ()
                               cut l1 : list
                                 call cons l1 y1 ys
                               cut l2 : list
                                 call cons l2 x1 l1
                               cut split_list : (list * list)
                                  call split split_list l2
                               read split_list (lhs, rhs)
                               cut merged_lhs : list
                                 call merge_sort merged_lhs lhs
                               cut merged_rhs : list
                                 call merge_sort merged_rhs rhs
                              call merge d merged_lhs merged_rhs
                }
  }


proc make_210 (d : list) =
  cut z : nat
     call zero z
  cut p1 : pair
     call dup_nat p1 z
     read p1 (z1, z2)
  cut one : nat
     call succ one z1
  cut p2 : pair
     call dup_nat p2 one
     read p2 (one1, one2)
  cut two : nat
     call succ two one1
  cut l : list
     call nil l
  cut l1 : list
     call cons l1 two l
  cut l2 : list
     call cons l2 one2 l1
     call cons d z2 l2

proc make_012 (d : list) =
  cut z : nat
     call zero z
  cut p1 : pair
     call dup_nat p1 z
     read p1 (z1, z2)
  cut one : nat
     call succ one z1
  cut p2 : pair
     call dup_nat p2 one
     read p2 (one1, one2)
  cut two : nat
     call succ two one1
  cut l : list
     call nil l
  cut l1 : list
     call cons l1 z2 l
  cut l2 : list
     call cons l2 one2 l1
     call cons d two l2

/* Run the tests */
proc test_split (d : list * list) =
  cut xs : list
    call make_210 xs
  call split d xs

proc test_merge (d : list) =
  cut xs : list
    call make_210 xs
  cut ys : list
    call make_210 ys
  call merge d xs ys

proc test_merge_sort (d : list) =
  cut xs : list
    call make_210 xs
  call merge_sort d xs

