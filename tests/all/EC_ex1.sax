type bool = +{'true: 1, 'false: 1}
type bin = +{'b0: bin, 'b1: bin, 'e: 1}

proc zero (d: bin) = 
    cut z : 1 
        write z ()
    write d 'e(z)

proc one (d: bin) = 
    cut x : bin 
        call zero x 
    write d 'b1(x) 

proc two (d: bin) = 
    cut x : bin 
        call one x 
    write d 'b0(x)

proc three (d: bin) = 
    cut x : bin 
        call two x 
    write d 'b1(x)

proc dealloc_bin (d: 1) (x: bin) = 
    read x {
        | 'b0(x0) => call dealloc_bin d x0
        | 'b1(x1) => call dealloc_bin d x1 
        | 'e(u) => id d u 
    }

proc dup_bool (d : bool * bool) (x : bool) =
    cut u2: 1
        write u2 ()
    read x {
    | 'true (u) =>   cut d1 : bool
                        write d1 'true (u)
                    cut d2 : bool
                        write d2 'true (u2) 
                    write d (d1, d2)
    | 'false (u) => cut d1 : bool
                        write d1 'false (u)
                    cut d2 : bool
                        write d2 'false (u2) 
                    write d (d1, d2)
    }

proc succ (d : bin) (x : bin) =
    read x {
        | 'b0(x0) => write d 'b1(x0)
        | 'b1(x1) => cut y : bin
                        call succ y x1
                    write d 'b0(y)
        | 'e(u) => read u ()
                    call one d
    }
    
proc addition (d1: bin) (carry: bool) (x: bin) (y: bin) = 
    read x {
        | 'b0(x0) => 
        read y {
            | 'b1(y1) => 
                cut carry2 : bool * bool 
                    call dup_bool carry2 carry 
                read carry2 (carry21, carry22)
                cut d2 : bin 
                    call addition d2 carry21 x0 y1 
                read carry22 {
                    | 'true (u2) => read u2 () 
                                    write d1 'b0(d2)
                    | 'false (u2) => read u2 () 
                                    write d1 'b1(d2)
                }
            | 'b0(y0) => 
                cut u : 1 
                    write u () 
                cut carry2 : bool 
                    write carry2 'false (u)
                cut d2 : bin 
                    call addition d2 carry2 x0 y0 
                
                read carry {
                    | 'true (u3) => read u3 () 
                                    write d1 'b1(d2)
                    | 'false (u3) => read u3 ()     
                                    write d1 'b0(d2)
                }
            | 'e (u2) => 
                read u2 ()
                read carry {
                    | 'true (u3) => read u3 () 
                                    write d1 'b1(x0)
                    | 'false (u3) => read u3 ()     
                                    write d1 'b0(x0)
                }
        }
        | 'b1(x1) => 
            read y {
                | 'b1(y1) => 
                    cut u : 1 
                        write u () 
                    cut carry2 : bool 
                        write carry2 'true (u) 
                    cut d2 : bin 
                        call addition d2 carry2 x1 y1 
                    read carry {
                        | 'true (u2) => read u2 () 
                                        write d1 'b1(d2)
                        | 'false (u2) => read u2 () 
                                        write d1 'b0(d2)
                    }
                | 'b0(y0) => 
                    cut carry2 : bool * bool 
                        call dup_bool carry2 carry 
                    read carry2 (carry21, carry22)
                    cut d2 : bin 
                        call addition d2 carry21 x1 y0 
                    read carry22 {
                        | 'true (u2) => read u2 () 
                                        write d1 'b0(d2)
                        | 'false (u2) => read u2 () 
                                        write d1 'b1(d2)
                    }
                | 'e (u2) => 
                    read u2 ()
                    read carry {
                        | 'true (u3) => read u3 () 
                                        cut d3 : bin 
                                            call succ d3 x1
                                        write d1 'b0(d3)
                        | 'false (u3) => read u3 ()     
                                        write d1 'b1(x1)
                    }
            }
        | 'e(u2) => 
            read u2 () 
            read y {
                | 'e(u3) => 
                    read u3 ()
                    read carry {
                        | 'true (u4) => read u4 ()
                                        cut s : bin 
                                            call one s 
                                        id d1 s 
                        | 'false (u4) => read u4 ()
                                        cut s : bin 
                                            call zero s 
                                        id d1 s
                    }
                | 'b1(y1) => 
                    read carry {
                        | 'true (u4) => read u4 ()
                                        cut s : bin 
                                            call succ s y1
                                        write d1 'b1(s)
                        | 'false (u4) => read u4 () 
                                        write d1 'b0(y1)
                    }
                | 'b0(y0) => 
                    read carry {
                        | 'true (u4) => read u4 ()
                                        write d1 'b1(y0)
                        | 'false (u4) => read u4 () 
                                        write d1 'b0(y0)
                    }
            }
    }

proc f_addition (d: bin) (x: bin) (y: bin) = 
    cut u : 1 
        write u ()
    cut carry : bool 
        write carry 'false(u)
    call addition d carry x y 

proc test_addition (d: bin) = 
    cut x : bin 
        call one x 
    cut y : bin 
        call two y
    call f_addition d x y

proc test_addition2 (d: bin) = 
    cut x : bin 
        call three x 
    cut y : bin 
        call two y
    call f_addition d x y