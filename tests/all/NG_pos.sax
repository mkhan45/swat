/* BEGIN: nat.sax import */

type nat = +{ 'zero : 1 , 'succ : nat }

proc zero (d : nat) =
  cut u : 1
    write u ()
  write d 'zero(u)

proc dup_nat (d : nat * nat) (a : nat) =
  read a
  {
  | 'zero(u) =>
    read u ()
    cut dzero1 : nat
      call zero dzero1
    cut dzero2 : nat
      call zero dzero2
    write d (dzero1, dzero2)
  | 'succ(ar) =>
    cut dr : nat * nat
      call dup_nat dr ar
    read dr (ar1, ar2)
    cut a1 : nat
      write a1 'succ(ar1)
    cut a2 : nat
      write a2 'succ(ar2)
    write d (a1, a2)
  }

proc plus_nat (d : nat) (a : nat) (b : nat) =
  read a
  {
  | 'zero(u) => 
    read u ()
    id d b
  | 'succ(ar) => 
    cut dr : nat
      call plus_nat dr ar b
    write d 'succ(dr)
  }

/* END: nat.sax import */



/* This file contains basic utilities for positive natural numbers and will be utilized in other tests. */

type pos = +{ 'succ : nat }

proc one (d : pos) =
  cut dzero : nat
    call zero dzero
  write d 'succ(dzero)

proc dup_pos (d : pos * pos) (a : pos) =
  read a
  {
  | 'succ(b) =>
    cut bb : nat * nat
      call dup_nat bb b
    read bb (b1, b2)
    cut a1 : pos
      write a1 'succ(b1)
    cut a2 : pos
      write a2 'succ(b2)
    write d (a1, a2)
  }

proc plus_pos (d : pos) (a : nat) (b : pos) =
  read a
  {
  | 'zero(u) => 
    read u ()
    id d b
  | 'succ(ar) => 
    cut dr : nat
      call plus_pos dr ar b
    write d 'succ(dr)
  }
