# TODO 5

- make allocator resize when needed
    - let freelist point directly to next node, not relatively
- reuse optimization
    - and avoid extra writes?
    - In first compilation pass, track last frees. Need to
       track in environment whether or not a variable is reused
       so that we can choose not to free a variable and we can
       also record which address to reuse.
    - In second compilation pass, a check on initialization if
      we should emit a reuse. On read we can check if the variable
      is reused. If it is reused don't emit a free.
- lazy return boxing
- generate print functions per type

-----------------

Adjointness issue:

I had it backwards before; linear types should be allowed to reference unrestricted types
but not the other way around. This is the opposite of unmanaged memory and GC, where GC (unrestricted)
should be able to reference the unmanaged heap (linear). The workaround is to make a global object
array of unrestricted values referenced by linear ones. We can store an i32 index into the array in
the linear value, and then remove it from the array when it is deallocated.

# General structure

dest is the top of the stack

# TODO 4

1. Negatives
    - probably just closures, no records
    - gotta just GC them
        - realistically in adjoint sax, most closures would not be linear 
    - means that stack vals may be GC refs
        - when generating func types, have to use gc ref instead of i32 for arrow args and ret
2. Report

# TODO 3

1. make free follow refs?
    - I guess not, because the refs will be on the stack, and can be discarded later
2. negative types
    - Closures represented by [ fn_ptr, nargs ] [ argn ]* 
    - records represented by [ record_inst_idx; nargs ] [ argn ]*
        - record_inst_idxs are static
3. should free pairs read by switch
4. let functions return pairs, and only allocate when needed
5. make tailrecs actually loop?
    - idk how bad wasmtime is
6. reuse optimization
7. maybe try wasmer
    - could also try browser by writing the runtime stuff in JS or WASM

# TODO 2

1. Restructure get_addr, get_tag etc. 
    - GetAddr meta instr should take a list and ensure that the top of the stack is the list
    - get_addr, get_tag, etc. should look at the addr graph
    - get_addr, get_tag, etc. have three cases:
        1. Already on top (do nothing)
        2. Load from locals
        3. Load from memory, in which case both components should be loaded, maybe stored in locals
2. Switch refactor
    - Must detect when the variable it's switching on hasn't actually been allocated
    - Should free
3. Make free follow refs
    - Needs to accept a type
4. Avoid allocating variables that are read in the func

# TODO

1. Needed annotations for wasm_func_env:
    - Used out of cut order (to make locals)
    - Deref'd args
        - if an arg is deref'd/Read in all cases, make two locals for it instead of just the addr
        - conversely, if a cut variable is Read in all cases, we don't have to allocate it
2. negative polarity
3. I think we only have to allocate variables which are used as arguments.
